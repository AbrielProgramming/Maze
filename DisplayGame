import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
public class DisplayGame {

	JFrame frame;
	JPanel panel;
	JPanel bestTimes;
	JPanel options;
	JPanel mazePanel;
	Timer gameTimer;
	Maze currentMaze;
	Maze[] allMazes={new Level1(),new Level2(),new Level3(),new Bonus()};
	JButton pause;
	JComboBox level;
	int levelNum=0;
	JLabel showTime;
	Player player=new Player("Test Player");
	TrackTime timeTracker;
	int lastSelectedIndex=0;
	int fontSize=15;
	public DisplayGame(){
		frame=new JFrame("Labyrinth");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		currentMaze=allMazes[0];
		initiateScreen();
	}
	private void initiateScreen(){
		frame.dispose();
		frame=new JFrame("Labyrinth");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		panel=new JPanel();
		panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
		panel.setBackground(Color.green);
		options=new JPanel();
		options.setLayout(new BoxLayout(options,BoxLayout.Y_AXIS));
		options.setBackground(Color.green);
		pause=new JButton("Pause");
		pause.setSize(100,100);
		pause.setActionCommand("pause");
		String[] levels={"Level 1","Level 2","Level 3"};
		level=new JComboBox(levels);
		level.setSelectedIndex(levelNum);
		level.setAlignmentX(JFrame.LEFT_ALIGNMENT);
		level.setBackground(Color.white);
		level.setMaximumSize( level.getPreferredSize() );
		level.addActionListener(new LevelChoiceListener());

		timeTracker=new TrackTime();
		showTime=new JLabel(""+timeTracker.getTime());
		options.add(showTime);
		options.add(pause);
		options.add(level);
		
		bestTimes=new JPanel();
		bestTimes.setLayout(new BoxLayout(bestTimes,BoxLayout.Y_AXIS));
		bestTimes.setBackground(Color.green);
		setBestTimes();
		options.add(bestTimes);
		options.add(Box.createVerticalGlue());
		panel.add(options);
		currentMaze.setPlayer(player);
		panel.add(Box.createHorizontalGlue());
		panel.add(currentMaze);
		panel.add(Box.createHorizontalGlue());

		panel.setFocusable(true);
		panel.addKeyListener(new KeyBoardListener());
		frame.setContentPane(panel);
		frame.pack();
		frame.setSize(500,300);
		frame.setVisible(true);
		frame.addComponentListener(new ComponentAdapter() {
		    public void componentResized(ComponentEvent e) {
		    	currentMaze.setPixelConstant((int)frame.getSize().getWidth()/60);
		    	currentMaze.repaint();
		    }
		});
	}
	
	private void setBestTimes(){
		
		String currentLevel=currentMaze.getLevel();
		JLabel timeLabel=new JLabel("Best Times:");
		bestTimes.add(timeLabel);
		int style=timeLabel.getFont().getStyle();
		String name=timeLabel.getFont().getName();
		timeLabel.setFont(new Font(name,style,fontSize));
		
		for (int counter=0;counter<allMazes.length;counter++){
			timeLabel=new JLabel(allMazes[counter].getLevel() + ": "+ allMazes[counter].getBestTime());
			style=timeLabel.getFont().getStyle();
			name=timeLabel.getFont().getName();
			timeLabel.setFont(new Font(name,style,fontSize));
			bestTimes.add(timeLabel);
		}
	}
	class LevelChoiceListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			String choice=(String)level.getSelectedItem();
			if (choice.equals("Level 1")){
				currentMaze=allMazes[0];
				levelNum=0;
				lastSelectedIndex=0;
				initiateScreen();

			}else if (choice.equals("Level 2")){
				if (allMazes[0].isCompleted()){
					currentMaze=allMazes[1];
					levelNum=1;
					lastSelectedIndex=1;
					initiateScreen();
				}else{
					JOptionPane.showMessageDialog(null, "You must compelete the previous level before moving on!", "Sorry!", JOptionPane.ERROR_MESSAGE);
					level.setSelectedIndex(lastSelectedIndex);
				}
			}else if (choice.equals("Level 3")){
				if (allMazes[1].isCompleted()){
					currentMaze=allMazes[2];
					levelNum=2;
					lastSelectedIndex=2;
					initiateScreen();
				}else{
					JOptionPane.showMessageDialog(null, "You must compelete the previous level before moving on!", "Sorry!", JOptionPane.ERROR_MESSAGE);
					level.setSelectedIndex(lastSelectedIndex);
				}
			}
		}
	}
	class KeyBoardListener extends KeyAdapter{
		public void keyPressed(KeyEvent e){
			String keyName=e.getKeyText(e.getKeyCode());
			currentMaze.movePlayer(keyName);
			if (currentMaze.gameComplete()){
				if (JOptionPane.YES_OPTION==JOptionPane.showConfirmDialog(null,"Congratulations, you won! Would you like to move on to the next level?","Congratulations!", JOptionPane.YES_NO_OPTION)){
					if (lastSelectedIndex<2){
						currentMaze=allMazes[lastSelectedIndex+1];
						currentMaze.setPlayer(player);
						lastSelectedIndex+=1;
					}
					level.setSelectedIndex(lastSelectedIndex);
					panel.repaint();
				}else{
					currentMaze.setPlayer(player);
				}
			}
		}
	}
	public static void runGUI(){
		JFrame.setDefaultLookAndFeelDecorated(true);
		DisplayGame test=new DisplayGame();
	}
	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run(){
				runGUI();
			}
		});

	}

}
