
public class Plate {
	private int xStart;
	private int yStart;
	private int length;
	private String orientation; //defined by vertical or horizontal, no caps
	private Grid grid;
	private GridSpace[] covered;
	public Plate(Grid grid, int xStart, int yStart, int length, String orientation) {

		this.xStart=xStart;
		this.yStart=yStart;
		this.length=length;
		this.orientation=orientation;
		this.grid=grid;
		covered=getCovered(xStart, yStart);

	}

	public void editCovered(int xStart, int yStart) {
		covered=getCovered(xStart, yStart);
	}
	private GridSpace[] getCovered(int xStart, int yStart) {
		covered=new GridSpace[length];
		if (orientation=="vertical") {
			for (int i=0; i<length; i++) {
				covered[i]=grid.getGridSpace(xStart, yStart+i);
			}

		} else if (orientation=="horizontal") {
			for (int i=0; i<length; i++) {
				covered[i]=grid.getGridSpace(xStart+i, yStart);
			}
		}
		return covered;
	}

	public GridSpace[] getSpacesCovered() {
		return covered;
	}
	public void setGrid() {
		if (orientation=="vertical") {
			for (int i=0; i<length; i++) {
				GridSpace space=grid.getGridSpace(xStart, yStart+i);
				space.editMovement(false);
				space.editOccupiedBy(this);
			}

		} else if (orientation=="horizontal") {
			for (int i=0; i<length; i++) {
				GridSpace space=grid.getGridSpace(xStart+i, yStart);
				//System.out.println(space.getX()+" "+space.getY());
				space.editMovement(false);
				space.editOccupiedBy(this);
			}
		}

	}
	
	public int length() {
		return length;
	}

	public String orientation() {
		return orientation;
	}

	public int xStart() {
		return xStart;
	}

	public int yStart() {
		return yStart;
	}
	
	public Grid getGrid() {
		return grid;
	}
}
